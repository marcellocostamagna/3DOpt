"""
Summarize CAE (Connected Atom Environment) matching from a log file.

This script parses log files generated by the CAE comparison pipeline,
extracts per-target statistics (matched, distorted, and no_match CAEs),
checks consistency, and prints a summary for each target.
"""

import re

def summarize_cae_log(log_text):
    targets = []
    current_target = None
    total_caes = 0
    matched_caes = 0
    distorted_matches = 0
    no_matches = 0

    # For per-case (CAE) status (not used in summary, but could be extended)
    cae_results = []

    for line in log_text.splitlines():
        # Target start
        if match := re.search(r"INFO:\s*🔍 Target:\s+(\S+)", line):
            if current_target:
                targets.append({
                    "name": current_target,
                    "total": total_caes,
                    "matched": matched_caes,
                    "distorted": distorted_matches,
                    "no_match": no_matches,
                    "cae_results": cae_results,
                })
            current_target = match.group(1)
            total_caes = matched_caes = distorted_matches = no_matches = 0
            cae_results = []

        # Total unique target CAEs
        elif match := re.search(r"INFO:\s*✅ Unique target CAEs: (\d+)", line):
            total_caes = int(match.group(1))

        # Matched summary
        elif match := re.search(r"INFO:\s*📊 Matched (\d+)/(\d+)", line):
            matched_caes = int(match.group(1))

        # Distorted summary
        elif match := re.search(r"INFO:\s*🟡 (\d+) matched only as Distorted Matches", line):
            distorted_matches = int(match.group(1))

        # No match summary
        elif match := re.search(r"INFO:\s*🟥 (\d+) had no population CAE", line):
            no_matches = int(match.group(1))

        # Per-CAE detailed info (optional, for future extension)
        elif match := re.search(r"INFO:\s*🟥 No population CAE.*for CAE", line):
            cae_results.append("no_match")
        # Could add more per-CAE logic here if needed.

    # Final flush
    if current_target:
        targets.append({
            "name": current_target,
            "total": total_caes,
            "matched": matched_caes,
            "distorted": distorted_matches,
            "no_match": no_matches,
            "cae_results": cae_results,
        })

    # Print consistency summary
    for idx, t in enumerate(targets, 1):
        total_reported = t["matched"] + t["distorted"] + t["no_match"]
        status = "OK"
        if t["total"] != total_reported:
            status = f"MISMATCH (reported total: {t['total']}, counted: {total_reported})"
        print(f"{idx}_{t['name']}: total CAEs: {t['total']}, matched: {t['matched']}, distorted: {t['distorted']}, no_match: {t['no_match']}  --> {status}")

if __name__ == "__main__":
    # Example usage
    with open("cae_matching_0_3.log", "r") as f:
        log_data = f.read()
    summarize_cae_log(log_data)
